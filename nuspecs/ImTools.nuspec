<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
    <metadata minClientVersion="3.3.0">
        <id>ImToolsUnionEdition</id>
        <version>0.1</version>
        <authors>stone-w4tch3r</authors>
        <copyright>Copyright Â© 2016-2023 Maksim Volkau</copyright>
        <projectUrl>https://github.com/stone-w4tch3r/ImToolsUnionEdition</projectUrl>
        <license type="expression">MIT</license>
        <requireLicenseAcceptance>false</requireLicenseAcceptance>
        <description>
<![CDATA[
        Extension for ImTools package. Forked from original source code.
        Contains classes like Unit or Union from old ImTools. No changes were made to their code.
        ---original description---
        Immutable persistent collections, algebraic sum-type aka descriminated union, Ref type and supportive extensions for performant functional programming in C#.
        Split from the DryIoc: https://github.com/dadhi/DryIoc
]]>
        </description>
        <tags>FP Performance Simple Functional Immutable Persistent Map Avl 2-3Tree Self Balanced Tree Dictionary Thread-safe Functional Atomic Ref Algebraic Discriminated Union SumType Unit</tags>
        <releaseNotes>
<![CDATA[
## v0.1 first release

`Unit` and `Union` classes are now back. They were removed from DryIoc and ImTools packages, but were still present in the source code. 
So here they are again. 
This package contains only Union.cs, original ImTools code not included.

---original release notes---

## v4.0.0 Major release

### Breaking changes

`ImMap<V>` type is replaced by `ImHashMap<int, V>`.
The implementations of ImMap and ImHashMap are combined into one, reducing the code size, and using all performance optimizations from the both.
This change will simplify further performance improvements, testing and bug-fixes. 

I have tried to keep the API as similar as possible,
but you may expect that some types and methods were renamed, or new overloads were added.

### Performance and memory improvements

- Fewer allocations (~10%), see the benchmarks in project readme
- Keeping the performance almost the same

### Closed issues

- #41 Add a builder-like capability to the ImHashMap via BuildFromDifferent methods
- #47 Add output of the ImHashMap as mermaid diagram, e.g. `ToMermaidString` method
- #48 Merge the ImMap and ImHashMap implementations
- #50 Optimize Enumerable for the PartitionedHashMap
- #51 Reduce ImHashMap memory allocations, keeping the speed
- #52 Add AddSureNotPresent methods to compensate for GetSurePresent methods

]]>
        </releaseNotes>
        <contentFiles>
            <files include="cs/any/*.*" buildAction="Compile" />
        </contentFiles>
        <dependencies>
            <group targetFramework="net45" />
            <group targetFramework="netstandard2.0" />
        </dependencies>
    </metadata>
    <files>
        <file src="..\LICENSE.txt" />
        <file src="..\ImTools.snk" />

        <file src="..\playground\ImTools.UnionPlayground\Union.cs" target="content\net45\Union" />
        <file src="..\playground\ImTools.UnionPlayground\Union.cs" target="contentFiles\cs\net45\Union" />
        <file src="..\playground\ImTools.UnionPlayground\Union.cs" target="contentFiles\cs\netstandard2.0\Union" />
    </files>
</package>
